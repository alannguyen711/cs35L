After reading the recommended websites on the assignment page, I used the Local Development Environment page to install the proper application necessary (the current version of Node) Create React App. Then, I created a project in VS Code. I started by using the commands in my VS Code terminal:npx app create-react-app tic-tac-toe and cd tic-tac-toe which took me to the correct place to begin editing my files. I pasted in the source code in the correct files in each of the proper files, and am now ready to begin editing for the tic tac toe game. The next step is to fill a Square with an “X” when clicked. I first changed the button tag, adding “onClick={() => alert(‘click’)” which would notify when clicked. To declare the shared state of the children in the parent component, I added the following constructor. This initialed each of the 9 squares to null. I need to make a few changes to Square to ensure the function onClick can be called by Square. I will first change the “state” to “props” in “this.state.value” , and then change “this.setState()” with “this .props.onClick()” in the render method of Square. At this point in the code, I only have “X” as a response to each click. Consequently, I must add the “O” element that is so integral to the game. I added this helper function called calculateWinner given in the instructions in order to help declaring a winner. I am able to call this function (which checks for a winner and returns the result) in Board’s render function. I now changed the handleClick function in Board, because it doesn’t always take all nine turns to achieve a winner. To account for this, I replaced the existing handleClick with the correct code. The next step is to add Time Travel abilities to the game to work as the website example does. I will do this now. I can create a history array to hold the past moves of the board states. I will first set up the initial state in the Game component, using a constructor. Board must be altered to make this implementation work, I will delete the constructor, replace “this.state.squares[i] with “this.props.squares[I], and replace this.handleClick(i) with this.props.onClick(i) in renderSquare. I must now update Game’s render function to use the history correctly, and to display the correct status:. Board’s render function must be updated as well, as Game’s render took on some of its purpose. Furthermore, handleClick should now be stored in Game in order to accommodate our past edits. It is time to show the past moves of the game using the history implementation we just programmed. I started by using the map method in map my history onto on-screen buttons. This is what the map function is used for, mapping data to other data. I added this function after handleClick. It updates stepNumber properly and changes xIsNext to true on the even steps. The last few steps are making sure that within handleClick we use the slice function. This makes it so that if we go back to old moves and then make new ones, the history is not jumbled up. I do this by replacing this.state.history with this.state.history.slice(0, this.state.stepNumber + 1). The last step is to modify Game’s render to render the move according to stepNumber if this is not the last move. This is changed in the first few lines of Game’s render function. Now, our tic-tac-toe with history is fully functional.
